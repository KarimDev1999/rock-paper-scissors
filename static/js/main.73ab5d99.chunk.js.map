{"version":3,"sources":["Results.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Results","userChosesHistory","computerChosesHistory","computerScore","userScore","onClearHistory","className","map","chose","i","emoji","length","onClick","App","useState","name","wins","gameEmojis","userChose","setUserChose","computerChose","setComputerChose","setComputerChosesHistory","setUserChosesHistory","setComputerScore","setUserScore","onHandleClick","Math","floor","random","computerRandomChose","useEffect","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOA8BeA,EAlBmB,SAAC,GAA4F,IAA1FC,EAAyF,EAAzFA,kBAAmBC,EAAsE,EAAtEA,sBAAuBC,EAA+C,EAA/CA,cAAeC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,eACrG,OACI,sBAAKC,UAAU,UAAf,UACI,sBAAKA,UAAU,mBAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,gDAAmBF,KACnB,8BAAMH,EAAkBM,KAAI,SAACC,EAAeC,GAAhB,OAA8B,8BAAcD,EAAME,OAAVD,WAExE,sBAAKH,UAAU,oBAAf,UACI,oDAAuBH,KACvB,8BAAMD,EAAsBK,KAAI,SAACC,EAAeC,GAAhB,OAA8B,8BAAcD,EAAME,OAAVD,cAGlD,IAA7BR,EAAkBU,QAAiD,IAAjCT,EAAsBS,OAAe,wBAAQL,UAAU,SAASM,QAASP,EAApC,2BAA6E,S,MC6ClJQ,MApDf,WAAgB,IAAD,EACQC,mBAAS,CAAC,CAAEC,KAAM,OAAQL,MAAO,SAAKM,KAAM,WAAa,CAAED,KAAM,QAASL,MAAO,SAAKM,KAAM,QAAU,CAAED,KAAM,UAAWL,MAAO,SAAKM,KAAM,WAAzJC,EADM,sBAGqBH,mBAAwB,MAH7C,mBAGNI,EAHM,KAGKC,EAHL,OAI6BL,mBAAwB,MAJrD,mBAINM,EAJM,KAISC,EAJT,OAM6CP,mBAAmB,IANhE,mBAMNZ,EANM,KAMiBoB,EANjB,OAOqCR,mBAAmB,IAPxD,mBAONb,EAPM,KAOasB,EAPb,OAS6BT,mBAAiB,GAT9C,mBASNX,EATM,KASSqB,EATT,OAUqBV,mBAAiB,GAVtC,mBAUNV,EAVM,KAUKqB,EAVL,KAcPC,EAAgB,SAAChB,GACrBS,EAAaT,GArBW,SAACO,EAAsBI,GAEjDA,EAAiBJ,EADFU,KAAKC,MAAMD,KAAKE,SAAWZ,EAAWN,UAqBnDmB,CAAoBb,EAAYI,IAsBlC,OAZAU,qBAAU,WACJb,GAAaE,IACfF,EAAUF,OAASI,EAAcL,MAAQU,GAAa,SAAAO,GAAI,OAAIA,EAAO,KACrEZ,EAAcJ,OAASE,EAAUH,MAAQS,GAAiB,SAAAQ,GAAI,OAAIA,EAAO,KACzEV,EAAyB,GAAD,mBAAKpB,GAAL,CAA4BkB,KACpDG,EAAqB,GAAD,mBAAKtB,GAAL,CAAwBiB,QAE7C,CAACE,EAAeF,IAMjB,sBAAKZ,UAAU,MAAf,UACE,qDACA,qBAAKA,UAAU,cAAf,SAEIW,EAAWV,KAAI,SAACG,EAAOD,GAAR,OAAc,wBAAgBG,QAAS,kBAAMc,EAAchB,IAAQJ,UAAU,QAA/D,SAAwEI,EAAMA,OAAjED,QAG9C,cAAC,EAAD,CAASJ,eA3BU,WACrBiB,EAAyB,IACzBC,EAAqB,IACrBE,EAAa,GACbD,EAAiB,IAuB0BrB,cAAeA,EAAeC,UAAWA,EAAWF,sBAAuBA,EAAuBD,kBAAmBA,QClDrJgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.73ab5d99.chunk.js","sourcesContent":["import React from 'react';\r\nimport { IChose } from './App';\r\n\r\n\r\ninterface IProps {\r\n    userChosesHistory: IChose[];\r\n    computerChosesHistory: IChose[];\r\n    computerScore: number;\r\n    userScore: number;\r\n    onClearHistory(): void;\r\n}\r\n\r\nconst Results: React.FC<IProps> = ({ userChosesHistory, computerChosesHistory, computerScore, userScore, onClearHistory }) => {\r\n    return (\r\n        <div className='results'>\r\n            <div className=\"results__columns\">\r\n                <div className='results__user'>\r\n                    <span>your score: {userScore}</span>\r\n                    <div>{userChosesHistory.map((chose: IChose, i: number) => <div key={i}>{chose.emoji}</div>)}</div>\r\n                </div>\r\n                <div className='results__computer'>\r\n                    <span>computer score: {computerScore}</span>\r\n                    <div>{computerChosesHistory.map((chose: IChose, i: number) => <div key={i}>{chose.emoji}</div>)}</div>\r\n                </div>\r\n            </div>\r\n            {userChosesHistory.length !== 0 || computerChosesHistory.length !== 0 ? <button className='button' onClick={onClearHistory}>clear history</button> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Results\r\n","import React, { useState, useEffect } from 'react';\nimport Results from './Results';\nimport './App.css';\n\n\n\nexport interface IChose {\n  name: string,\n  emoji: string,\n  wins: string\n}\n\nconst computerRandomChose = (gameEmojis: IChose[], setComputerChose: React.Dispatch<React.SetStateAction<IChose | null>>): void => {\n  const random = Math.floor(Math.random() * gameEmojis.length);\n  setComputerChose(gameEmojis[random]);\n}\n\n\nfunction App() {\n  const [gameEmojis] = useState([{ name: 'rock', emoji: '✊', wins: 'siscors' }, { name: 'paper', emoji: '✋', wins: 'rock' }, { name: 'siscors', emoji: '✌', wins: 'paper' }]);\n\n  const [userChose, setUserChose] = useState<IChose | null>(null);\n  const [computerChose, setComputerChose] = useState<IChose | null>(null);\n\n  const [computerChosesHistory, setComputerChosesHistory] = useState<IChose[]>([]);\n  const [userChosesHistory, setUserChosesHistory] = useState<IChose[]>([]);\n\n  const [computerScore, setComputerScore] = useState<number>(0);\n  const [userScore, setUserScore] = useState<number>(0);\n\n\n\n  const onHandleClick = (emoji: IChose) => {\n    setUserChose(emoji);\n    computerRandomChose(gameEmojis, setComputerChose);\n  };\n\n  const onClearHistory = () => {\n    setComputerChosesHistory([]);\n    setUserChosesHistory([]);\n    setUserScore(0);\n    setComputerScore(0);\n  }\n\n  useEffect(() => {\n    if (userChose && computerChose) {\n      userChose.wins === computerChose.name && setUserScore(prev => prev + 1);\n      computerChose.wins === userChose.name && setComputerScore(prev => prev + 1);\n      setComputerChosesHistory([...computerChosesHistory, computerChose]);\n      setUserChosesHistory([...userChosesHistory, userChose]);\n    }\n  }, [computerChose, userChose]);\n\n\n\n\n  return (\n    <div className=\"App\">\n      <h1>ROCK PAPER SCISSORS</h1>\n      <div className='emoji-group'>\n        {\n          gameEmojis.map((emoji, i) => <button key={i} onClick={() => onHandleClick(emoji)} className='emoji'>{emoji.emoji}</button>)\n        }\n      </div>\n      <Results onClearHistory={onClearHistory} computerScore={computerScore} userScore={userScore} computerChosesHistory={computerChosesHistory} userChosesHistory={userChosesHistory} />\n    </div>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}